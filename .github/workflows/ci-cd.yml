name: CI/CD Pipeline with TestNG

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  EMAIL_API_KEY: ${{ secrets.EMAIL_API_KEY }}

jobs:
  code-quality:
    name: Code Quality Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          cd backend
          npm install
          cd ../front
          npm install
          
      - name: Run ESLint
        run: |
          cd backend
          npm run test:quality
          cd ../front
          npm run test:quality

      - name: Run Security Checks
        run: |
          cd backend
          npm run test:security
          cd ../front
          npm run test:security

  test:
    name: TestNG Tests
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [models, routes, controllers, integration]
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          cd backend
          npm install
          
      - name: Run Tests
        run: |
          cd backend
          npm run test:${{ matrix.test-group }}

  build:
    name: Build and Package
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Build Tests
        run: |
          cd backend
          npm run test:build
          
      - name: Build Docker Images
        run: |
          docker build -t $DOCKER_USERNAME/family-budget-backend:${{ github.sha }} ./backend
          docker build -t $DOCKER_USERNAME/family-budget-frontend:${{ github.sha }} ./front
          
      - name: Push Docker Images
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_USERNAME/family-budget-backend:${{ github.sha }}
          docker push $DOCKER_USERNAME/family-budget-frontend:${{ github.sha }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, staging, production]
    steps:
      - uses: actions/checkout@v2
      
      - name: Deploy Tests
        run: |
          cd backend
          npm run test:deployment -- --env ${{ matrix.environment }}
          
      - name: Deploy to Environment
        run: |
          # כאן תהיה הלוגיקה של הדיפלוי לכל סביבה
          echo "Deploying to ${{ matrix.environment }}"

  notify:
    name: Send Notifications
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v2
      
      - name: Notification Tests
        run: |
          cd backend
          npm run test:notifications
          
      - name: Send Slack Notification
        if: env.SLACK_WEBHOOK != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Send Email Notification
        if: env.EMAIL_API_KEY != ''
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: CI/CD Pipeline Status
          body: Build status - ${{ job.status }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: CI/CD Pipeline
